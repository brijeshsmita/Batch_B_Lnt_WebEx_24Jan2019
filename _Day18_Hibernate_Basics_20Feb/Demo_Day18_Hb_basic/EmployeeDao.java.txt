/**
 * 
 */
package com.lnt.day18.hibernate.emp.dao;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.lnt.day18.hibernate.emp.exception.EmployeeException;
import com.lnt.day18.hibernate.emp.model.Employee;
import com.lnt.day18.hibernate.util.HibernateUtil;

/**
 * @author Smita
 *
 */
public class EmployeeDao implements IEmployeeDao {

	/**
	 * prepwork -> SessionFactory Object
	 */
	//private static Connection conn;
	private static SessionFactory sessionFactory;
	private static Session session;
	private Transaction tx;
	static {
		sessionFactory=HibernateUtil.getSessionFactory();
		if(sessionFactory!=null) {
			System.out.println("sessionFactory Obtained!!"+sessionFactory);
			session=sessionFactory.openSession();
		}else {
			System.err.println("sessionFactory NOT Obtained!!"+sessionFactory);
		}
	}

	@Override
	public int addEmployee(Employee employee) throws EmployeeException {
		tx=session.beginTransaction();
		Integer empId=(Integer) session.save(employee);
		tx.commit();
		return empId;
	//->someFramework.save(employee)
		/*String sql="INSERT INTO EMP123 values(emp123_seq.nextval,?,?)";
		try(PreparedStatement pst=conn.prepareStatement(sql);){//step 2 obtain ps
			//step 2 set values for the place holder
			pst.setString(1, employee.getEmpName());
			pst.setDouble(2, employee.getEmpSal());
			pst.executeQuery();
		} catch (SQLException e) {
			throw new EmployeeException("Error while Adding the employee records ... "+e);
		}
		return getAutoGeneratedEmpId();//returning the auto-generated empid generated by the sequence
		//we have created getAutoGeneratedEmpId method
*/	
		}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Employee> listAllEmployee() throws EmployeeException {
		return session.createQuery("from Employee").list();
		/*String sql = "SELECT * FROM EMP123";
		List<Employee> empList= new ArrayList<>();
		try (PreparedStatement pst = conn.prepareStatement(sql);) {
			ResultSet rs = pst.executeQuery(sql);
			System.out.println("Fetching the list of all the employees");
			Employee emp;
			while (rs.next()) {// we will iterate till rs will have the record
				emp=new Employee(rs.getInt(1), rs.getString(2), rs.getDouble(3));
				//create a employee object by fetching the data for resultSet
				empList.add(emp);//adding the created wmp object to the empList
			}
		} catch (SQLException e) {
			throw new EmployeeException("Error while listing the employee records ... "+e);
		}
		return empList;*/
	}
	@Override
	public int updateEmployee(Employee employee) throws EmployeeException {
		tx=session.beginTransaction();
		session.update(employee);
		tx.commit();
		return 1;
		/*String sql="UPDATE EMP123 SET ename=?,esal=? where eid=?";//never put semicolan in java code for queries
		//DML -insert,delete,update...will be executed using executeUpdate() method
		//it will return int value not ResultSet
		int result=0;
		try(PreparedStatement pst=conn.prepareStatement(sql);){//step 2 obtain ps
			//step 2 set values for the place holder
			pst.setString(1, employee.getEmpName());
			pst.setDouble(2, employee.getEmpSal());
			pst.setInt(3, employee.getEmpId());
			//step 3: execute the pst
			result = pst.executeUpdate();//in case of PS don't pass the sql here
		} catch (SQLException e) {
			throw new EmployeeException("Error while Updating the employee records ... "+e);
		}
		return result;*/
	}
	@Override
	public int deleteEmployee(int empId) throws EmployeeException {
		tx=session.beginTransaction();
		session.delete(searchEmployeeById(empId));
		tx.commit();
		return 1;
		/*String sql="DELETE FROM EMP123 where eid=?";//never put semicolan in java code for queries
		//DML -insert,delete,update...will be executed using executeUpdate() method
		//it will return int value not ResultSet
		int result=0;
		try(PreparedStatement pst=conn.prepareStatement(sql);){//step 2 obtain ps
			//step 2 set values for the place holder
			pst.setInt(1, empId);
			//step 3: execute the pst
			result = pst.executeUpdate();//in case of PS don't pass the sql here
		} catch (SQLException e) {
			throw new EmployeeException("Error while Deleting the employee records ... "+e);
		}
		return result;*/
	}

	@Override
	public Employee searchEmployeeById(int empId) throws EmployeeException {
		return (Employee) session.get(Employee.class, empId);//get return Object thus need to be typecasted
		/*String sql = "SELECT * FROM EMP123 where eid=?";
		Employee emp=null;
		try(PreparedStatement pst = conn.prepareStatement(sql);pre-compiled statement) {
			//before executing the query-set the placeholder value (i.e value to the ?)
			pst.setInt(1, empId);//? index and setting eid = 3 at runtime
			ResultSet rs= pst.executeQuery();//dont pass SQL here
			System.out.println("Searching the employee record for Employee Id : "+empId);
			if (rs.next()) {//we will iterate till rs will have the record
				emp= new Employee(rs.getInt(1), rs.getString(2), rs.getDouble(3));
				//we are fecthing the resultset data and creating the employee object
			}
		} catch (SQLException e) {
			throw new EmployeeException("Error while Searching the employee records by emp ID... "+e);
		}
		return emp;*/
	}


}
